"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const Temperatura_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Temperatura"));
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
class TemperaturasController {
    async InsertAllDataSensor({ response, request }) {
        const user_id = request.input('user_id');
        await Database_1.default.rawQuery("DELETE FROM temperaturas");
        await axios_1.default.get('https://thingspeak.com/channels/935349/field/1.json')
            .then((r) => {
            const x = r.data.feeds;
            Temperatura_1.default.createMany(x, user_id);
        }).catch((m) => {
            response.badRequest({ message: "no existen registros" });
        });
        response.ok({ message: "Registrados correctamente" });
    }
    async MostrarInfo({ response }) {
        try {
            const temp = await Temperatura_1.default.all();
            response.ok({ message: "datos", data: temp });
        }
        catch (error) {
            response.badRequest({ message: "error al mostrar" });
        }
    }
    async EliminarTodo({ response }) {
        try {
            await Database_1.default.rawQuery("DELETE FROM Temperaturas");
            response.ok({ message: "Eliminado correctamente" });
        }
        catch (error) {
            response.badRequest({ message: "No existen datos" });
        }
    }
}
exports.default = TemperaturasController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVtcGVyYXR1cmFzQ29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlRlbXBlcmF0dXJhc0NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxrREFBMEI7QUFDMUIsK0ZBQWlEO0FBQ2pELDJGQUFrRDtBQUdsRCxNQUFxQixzQkFBc0I7SUFFaEMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLEVBQUMsUUFBUSxFQUFFLE9BQU8sRUFBcUI7UUFFaEUsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUN4QyxNQUFNLGtCQUFRLENBQUMsUUFBUSxDQUFDLDBCQUEwQixDQUFDLENBQUE7UUFDbkQsTUFBTSxlQUFLLENBQUMsR0FBRyxDQUFDLHFEQUFxRCxDQUFDO2FBQ2pFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ1IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUE7WUFDdEIscUJBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ3pDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFO1lBQ1YsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFDLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxDQUFDLENBQUE7UUFDekQsQ0FBQyxDQUFDLENBQUM7UUFDSCxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFDLDJCQUEyQixFQUFDLENBQUMsQ0FBQTtJQUMxRCxDQUFDO0lBQ00sS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFDLFFBQVEsRUFBcUI7UUFFbkQsSUFBRztZQUNDLE1BQU0sSUFBSSxHQUFHLE1BQU0scUJBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUNwQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFDLE9BQU8sRUFBQyxJQUFJLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQTtTQUMzQztRQUNELE9BQU0sS0FBSyxFQUFDO1lBQ1IsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFDLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxDQUFDLENBQUE7U0FDcEQ7SUFDTCxDQUFDO0lBRU0sS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFDLFFBQVEsRUFBcUI7UUFFcEQsSUFBRztZQUNDLE1BQU0sa0JBQVEsQ0FBQyxRQUFRLENBQUMsMEJBQTBCLENBQUMsQ0FBQTtZQUNuRCxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFDLHlCQUF5QixFQUFDLENBQUMsQ0FBQTtTQUNuRDtRQUNELE9BQU0sS0FBSyxFQUFDO1lBQ1IsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFDLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxDQUFDLENBQUE7U0FDcEQ7SUFDTCxDQUFDO0NBR0o7QUF0Q0QseUNBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgVGVtcGVyYXR1cmEgZnJvbSAnQXBwL01vZGVscy9UZW1wZXJhdHVyYSc7XG5pbXBvcnQgRGF0YWJhc2UgZnJvbSAnQGlvYzpBZG9uaXMvTHVjaWQvRGF0YWJhc2UnO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlbXBlcmF0dXJhc0NvbnRyb2xsZXIge1xuXG4gICAgcHVibGljIGFzeW5jIEluc2VydEFsbERhdGFTZW5zb3Ioe3Jlc3BvbnNlLCByZXF1ZXN0fTpIdHRwQ29udGV4dENvbnRyYWN0KSB7XG5cbiAgICAgICAgICAgIGNvbnN0IHVzZXJfaWQgPSByZXF1ZXN0LmlucHV0KCd1c2VyX2lkJylcbiAgICAgICAgICAgIGF3YWl0IERhdGFiYXNlLnJhd1F1ZXJ5KFwiREVMRVRFIEZST00gdGVtcGVyYXR1cmFzXCIpXG4gICAgICAgICAgICBhd2FpdCBheGlvcy5nZXQoJ2h0dHBzOi8vdGhpbmdzcGVhay5jb20vY2hhbm5lbHMvOTM1MzQ5L2ZpZWxkLzEuanNvbicpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeCA9IHIuZGF0YS5mZWVkc1xuICAgICAgICAgICAgICAgICAgICBUZW1wZXJhdHVyYS5jcmVhdGVNYW55KHgsdXNlcl9pZClcbiAgICAgICAgICAgIH0pLmNhdGNoKChtKT0+e1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmJhZFJlcXVlc3Qoe21lc3NhZ2U6XCJubyBleGlzdGVuIHJlZ2lzdHJvc1wifSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVzcG9uc2Uub2soe21lc3NhZ2U6XCJSZWdpc3RyYWRvcyBjb3JyZWN0YW1lbnRlXCJ9KVxuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgTW9zdHJhckluZm8oe3Jlc3BvbnNlfTpIdHRwQ29udGV4dENvbnRyYWN0KXtcblxuICAgICAgICB0cnl7XG4gICAgICAgICAgICBjb25zdCB0ZW1wID0gYXdhaXQgVGVtcGVyYXR1cmEuYWxsKClcbiAgICAgICAgICAgIHJlc3BvbnNlLm9rKHttZXNzYWdlOlwiZGF0b3NcIixkYXRhOnRlbXB9KVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoKGVycm9yKXtcbiAgICAgICAgICAgIHJlc3BvbnNlLmJhZFJlcXVlc3Qoe21lc3NhZ2U6XCJlcnJvciBhbCBtb3N0cmFyXCJ9KVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBhc3luYyBFbGltaW5hclRvZG8oe3Jlc3BvbnNlfTpIdHRwQ29udGV4dENvbnRyYWN0KXtcblxuICAgICAgICB0cnl7XG4gICAgICAgICAgICBhd2FpdCBEYXRhYmFzZS5yYXdRdWVyeShcIkRFTEVURSBGUk9NIFRlbXBlcmF0dXJhc1wiKVxuICAgICAgICAgICAgcmVzcG9uc2Uub2soe21lc3NhZ2U6XCJFbGltaW5hZG8gY29ycmVjdGFtZW50ZVwifSlcbiAgICAgICAgfVxuICAgICAgICBjYXRjaChlcnJvcil7XG4gICAgICAgICAgICByZXNwb25zZS5iYWRSZXF1ZXN0KHttZXNzYWdlOlwiTm8gZXhpc3RlbiBkYXRvc1wifSlcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG4iXX0=